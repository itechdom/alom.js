{"version":3,"sources":["../../lib/variables.js"],"names":["_","require","getStateVariable","getAccessKeyForTenant","getDeployProfile","getValueFromDashboardSecrets","ctx","variableString","state","secretsUsed","add","substring","sls","processedInput","commands","accessKey","service","tenant","deploymentProfile","stage","provider","getStage","pick","secrets","fromPairs","secretValues","map","secretName","secretProperties","value","split","Error","getValueFromDashboardState","key","substr","length","outputName","subkey","app","region","getRegion","get","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst {\n  getStateVariable,\n  getAccessKeyForTenant,\n  getDeployProfile,\n} = require('@serverless/platform-sdk');\n\n// functions for new way of getting variables\nconst getValueFromDashboardSecrets = ctx => async variableString => {\n  ctx.state.secretsUsed.add(variableString.substring(8));\n  if (\n    ctx.sls.processedInput.commands[0] === 'login' ||\n    ctx.sls.processedInput.commands[0] === 'logout'\n  ) {\n    return {};\n  }\n  const accessKey = await getAccessKeyForTenant(ctx.sls.service.tenant);\n  const deploymentProfile = await getDeployProfile({\n    accessKey,\n    stage: ctx.provider.getStage(),\n    ..._.pick(ctx.sls.service, ['tenant', 'app', 'service']),\n  });\n  const secrets = _.fromPairs(\n    deploymentProfile.secretValues.map(({ secretName, secretProperties: { value } }) => [\n      secretName,\n      value,\n    ])\n  );\n  if (!secrets[variableString.split('secrets:')[1]]) {\n    throw new Error(`$\\{${variableString}} not defined`);\n  }\n  return secrets[variableString.split('secrets:')[1]];\n};\n\nconst getValueFromDashboardState = ctx => async variableString => {\n  const accessKey = await getAccessKeyForTenant(ctx.sls.service.tenant);\n  if (\n    ctx.sls.processedInput.commands[0] === 'login' ||\n    ctx.sls.processedInput.commands[0] === 'logout'\n  ) {\n    return {};\n  }\n  const service = variableString.substring(6).split('.', 1)[0];\n  const key = variableString.substring(6).substr(service.length);\n  const outputName = key.split('.')[1];\n  const subkey = key.substr(outputName.length + 2);\n  const { value } = await getStateVariable({\n    accessKey,\n    outputName,\n    service,\n    app: ctx.sls.service.app,\n    tenant: ctx.sls.service.tenant,\n    stage: ctx.provider.getStage(),\n    region: ctx.provider.getRegion(),\n  });\n  if (subkey) {\n    return _.get(value, subkey);\n  }\n  return value;\n};\n\nmodule.exports = {\n  getValueFromDashboardSecrets,\n  getValueFromDashboardState,\n};\n"],"file":"variables.js"}