"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var aliases_1 = require("./aliases");
var parentLocales_1 = require("./parentLocales");
function getParentLocaleHierarchy(locale) {
    var results = [];
    locale = aliases_1.default[locale] || locale;
    var parentLocale = parentLocales_1.default[locale];
    if (parentLocale) {
        results.push(parentLocale);
    }
    var localeParts = locale.split('-');
    for (var i = localeParts.length; i > 1; i--) {
        results.push(localeParts.slice(0, i - 1).join('-'));
    }
    return results;
}
exports.getParentLocaleHierarchy = getParentLocaleHierarchy;
function resolveSupportedLocale(locale, localeData) {
    if (!locale) {
        return;
    }
    var lowercasedLocale = locale.toLowerCase();
    if (lowercasedLocale in localeData) {
        return localeData[lowercasedLocale].locale || locale;
    }
    var alias = aliases_1.default[locale];
    if (alias) {
        var lowercasedAlias = alias.toLowerCase();
        if (lowercasedAlias in localeData) {
            return localeData[lowercasedAlias].locale || alias;
        }
    }
    var parentHierarchy = getParentLocaleHierarchy(locale);
    var parentLocale = locale;
    while (parentLocale) {
        parentLocale = parentHierarchy.shift();
        if (parentLocale) {
            var lowercasedParentLocale = parentLocale.toLowerCase();
            if (lowercasedParentLocale in localeData) {
                return localeData[lowercasedParentLocale].locale || parentLocale;
            }
        }
    }
    return;
}
function supportedLocalesOf(locales, localeData) {
    var localeArray = Array.isArray(locales) ? locales : [locales];
    return localeArray.filter(function (l) { return !!resolveSupportedLocale(l, localeData); });
}
exports.supportedLocalesOf = supportedLocalesOf;
function findSupportedLocale(locales, localeData) {
    var localeArray = Array.isArray(locales) ? locales : [locales];
    for (var i = 0; i < localeArray.length; i++) {
        var resolvedLocale = resolveSupportedLocale(localeArray[i], localeData);
        if (resolvedLocale) {
            return resolvedLocale;
        }
    }
}
exports.findSupportedLocale = findSupportedLocale;
