import { FormattableUnit } from './types';
import { RelativeTimeLocaleData } from '@formatjs/intl-utils';
export interface IntlRelativeTimeFormatOptions {
    /**
     * The locale matching algorithm to use.
     * Possible values are "lookup" and "best fit"; the default is "best fit".
     * For information about this option, see
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation.
     */
    localeMatcher?: 'best fit' | 'lookup';
    /**
     * The format of output message. Possible values are:
     * - "always" (default, e.g., 1 day ago),
     * - or "auto" (e.g., yesterday).
     * The "auto" value allows to not always have to
     * use numeric values in the output.
     */
    numeric?: 'always' | 'auto';
    /**
     * The length of the internationalized message. Possible values are:
     * - "long" (default, e.g., in 1 month)
     * - "short" (e.g., in 1 mo.),
     * - or "narrow" (e.g., in 1 mo.).
     * The narrow style could be similar to the short style for some locales.
     */
    style?: 'long' | 'short' | 'narrow';
}
export interface ResolvedIntlRelativeTimeFormatOptions extends Pick<IntlRelativeTimeFormatOptions, 'style' | 'numeric'> {
    /**
     * The BCP 47 language tag for the locale actually used.
     * If any Unicode extension values were requested in the
     * input BCP 47 language tag that led to this locale,
     * the key-value pairs that were requested and are
     * supported for this locale are included in locale.
     */
    locale: string;
    /**
     * The value requested using the Unicode
     * extension key "nu" or filled in as a default.
     */
    numberingSystem: string;
}
export declare type Part = LiteralPart | RelativeTimeFormatNumberPart;
export interface LiteralPart {
    type: 'literal';
    value: string;
}
export interface RelativeTimeFormatNumberPart extends Intl.NumberFormatPart {
    unit: FormattableUnit;
}
export default class RelativeTimeFormat {
    private readonly _nf;
    private readonly _pl;
    private readonly _fields;
    private readonly _style;
    private readonly _numeric;
    private readonly _localeMatcher;
    private readonly _numberingSystem;
    constructor(locales?: string | string[], options?: IntlRelativeTimeFormatOptions);
    format(value: number | string, unit: FormattableUnit): string;
    formatToParts(value: number | string, unit: FormattableUnit): Part[];
    resolvedOptions(): ResolvedIntlRelativeTimeFormatOptions;
    static supportedLocalesOf(locales: string | string[], opts?: Pick<IntlRelativeTimeFormatOptions, 'localeMatcher'>): (string | undefined)[];
    static __localeData__: Record<string, RelativeTimeLocaleData>;
    static __addLocaleData(...data: RelativeTimeLocaleData[]): void;
    static polyfilled: boolean;
}
