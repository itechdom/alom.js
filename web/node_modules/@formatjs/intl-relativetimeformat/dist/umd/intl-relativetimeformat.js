(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = global || self, factory(global.IntlRelativeTimeFormat = {}));
}(this, function (exports) { 'use strict';

    var VALID_UNITS = [
        'second',
        'minute',
        'hour',
        'day',
        'week',
        'month',
        'quarter',
        'year',
        'seconds',
        'minutes',
        'hours',
        'days',
        'weeks',
        'months',
        'quarters',
        'years',
    ];

    /* @generated */
    // prettier-ignore  
    var aliases = { "aa-SAAHO": "ssy", "aam": "aas", "aar": "aa", "abk": "ab", "adp": "dz", "afr": "af", "aju": "jrb", "aka": "ak", "alb": "sq", "als": "sq", "amh": "am", "ara": "ar", "arb": "ar", "arg": "an", "arm": "hy", "art-lojban": "jbo", "asm": "as", "aue": "ktz", "ava": "av", "ave": "ae", "aym": "ay", "ayr": "ay", "ayx": "nun", "az-AZ": "az-Latn-AZ", "aze": "az", "azj": "az", "bak": "ba", "bam": "bm", "baq": "eu", "bcc": "bal", "bcl": "bik", "bel": "be", "ben": "bn", "bgm": "bcg", "bh": "bho", "bih": "bho", "bis": "bi", "bjd": "drl", "bod": "bo", "bos": "bs", "bre": "br", "bs-BA": "bs-Latn-BA", "bul": "bg", "bur": "my", "bxk": "luy", "bxr": "bua", "cat": "ca", "ccq": "rki", "cel-gaulish": "xtg-x-cel-gaulish", "ces": "cs", "cha": "ch", "che": "ce", "chi": "zh", "chu": "cu", "chv": "cv", "cjr": "mom", "cka": "cmr", "cld": "syr", "cmk": "xch", "cmn": "zh", "cnr": "sr-ME", "cor": "kw", "cos": "co", "coy": "pij", "cqu": "quh", "cre": "cr", "cwd": "cr", "cym": "cy", "cze": "cs", "dan": "da", "deu": "de", "dgo": "doi", "dhd": "mwr", "dik": "din", "diq": "zza", "div": "dv", "drh": "mn", "drw": "fa-af", "dut": "nl", "dzo": "dz", "ekk": "et", "ell": "el", "emk": "man", "eng": "en", "epo": "eo", "esk": "ik", "est": "et", "eus": "eu", "ewe": "ee", "fao": "fo", "fas": "fa", "fat": "ak", "fij": "fj", "fin": "fi", "fra": "fr", "fre": "fr", "fry": "fy", "fuc": "ff", "ful": "ff", "gav": "dev", "gaz": "om", "gbo": "grb", "geo": "ka", "ger": "de", "gfx": "vaj", "ggn": "gvr", "gla": "gd", "gle": "ga", "glg": "gl", "glv": "gv", "gno": "gon", "gre": "el", "grn": "gn", "gti": "nyc", "gug": "gn", "guj": "gu", "guv": "duz", "gya": "gba", "ha-Latn-GH": "ha-GH", "ha-Latn-NE": "ha-NE", "ha-Latn-NG": "ha-NG", "hat": "ht", "hau": "ha", "hbs": "sr-Latn", "hdn": "hai", "hea": "hmn", "heb": "he", "her": "hz", "him": "srx", "hin": "hi", "hmo": "ho", "hrr": "jal", "hrv": "hr", "hun": "hu", "hye": "hy", "i-ami": "ami", "i-bnn": "bnn", "i-hak": "hak", "i-klingon": "tlh", "i-lux": "lb", "i-navajo": "nv", "i-pwn": "pwn", "i-tao": "tao", "i-tay": "tay", "i-tsu": "tsu", "i-default": "en-x-i-default", "i-enochian": "und-x-i-enochian", "i-mingo": "see-x-i-mingo", "ibi": "opa", "ibo": "ig", "ice": "is", "ido": "io", "iii": "ii", "ike": "iu", "iku": "iu", "ile": "ie", "ilw": "gal", "in": "id", "ina": "ia", "ind": "id", "ipk": "ik", "isl": "is", "ita": "it", "iw": "he", "jav": "jv", "jeg": "oyb", "ji": "yi", "jpn": "ja", "jw": "jv", "kal": "kl", "kan": "kn", "kas": "ks", "kat": "ka", "kau": "kr", "kaz": "kk", "kgc": "tdf", "kgh": "kml", "khk": "mn", "khm": "km", "kik": "ki", "kin": "rw", "kir": "ky", "kk-Cyrl-KZ": "kk-KZ", "kmr": "ku", "knc": "kr", "kng": "kg", "knn": "kok", "koj": "kwv", "kom": "kv", "kon": "kg", "kor": "ko", "kpv": "kv", "krm": "bmf", "ks-Arab-IN": "ks-IN", "ktr": "dtp", "kua": "kj", "kur": "ku", "kvs": "gdj", "kwq": "yam", "kxe": "tvd", "ky-Cyrl-KG": "ky-KG", "kzj": "dtp", "kzt": "dtp", "lao": "lo", "lat": "la", "lav": "lv", "lbk": "bnc", "lii": "raq", "lim": "li", "lin": "ln", "lit": "lt", "lmm": "rmx", "ltz": "lb", "lub": "lu", "lug": "lg", "lvs": "lv", "mac": "mk", "mah": "mh", "mal": "ml", "mao": "mi", "mar": "mr", "may": "ms", "meg": "cir", "mhr": "chm", "mkd": "mk", "mlg": "mg", "mlt": "mt", "mn-Cyrl-MN": "mn-MN", "mnk": "man", "mo": "ro", "mol": "ro", "mon": "mn", "mri": "mi", "ms-Latn-BN": "ms-BN", "ms-Latn-MY": "ms-MY", "ms-Latn-SG": "ms-SG", "msa": "ms", "mst": "mry", "mup": "raj", "mwj": "vaj", "mya": "my", "myt": "mry", "nad": "xny", "nau": "na", "nav": "nv", "nbl": "nr", "ncp": "kdz", "nde": "nd", "ndo": "ng", "nep": "ne", "nld": "nl", "nno": "nn", "nnx": "ngv", "no": "nb", "no-bok": "nb", "no-BOKMAL": "nb", "no-nyn": "nn", "no-NYNORSK": "nn", "nob": "nb", "nor": "nb", "npi": "ne", "nts": "pij", "nya": "ny", "oci": "oc", "ojg": "oj", "oji": "oj", "ori": "or", "orm": "om", "ory": "or", "oss": "os", "oun": "vaj", "pa-IN": "pa-Guru-IN", "pa-PK": "pa-Arab-PK", "pan": "pa", "pbu": "ps", "pcr": "adx", "per": "fa", "pes": "fa", "pli": "pi", "plt": "mg", "pmc": "huw", "pmu": "phr", "pnb": "lah", "pol": "pl", "por": "pt", "ppa": "bfy", "ppr": "lcq", "prs": "fa-AF", "pry": "prt", "pus": "ps", "puz": "pub", "que": "qu", "quz": "qu", "rmy": "rom", "roh": "rm", "ron": "ro", "rum": "ro", "run": "rn", "rus": "ru", "sag": "sg", "san": "sa", "sca": "hle", "scc": "sr", "scr": "hr", "sgn-BE-FR": "sfb", "sgn-BE-NL": "vgt", "sgn-CH-DE": "sgg", "sh": "sr-Latn", "shi-MA": "shi-Tfng-MA", "sin": "si", "skk": "oyb", "slk": "sk", "slo": "sk", "slv": "sl", "sme": "se", "smo": "sm", "sna": "sn", "snd": "sd", "som": "so", "sot": "st", "spa": "es", "spy": "kln", "sqi": "sq", "sr-BA": "sr-Cyrl-BA", "sr-ME": "sr-Latn-ME", "sr-RS": "sr-Cyrl-RS", "sr-XK": "sr-Cyrl-XK", "src": "sc", "srd": "sc", "srp": "sr", "ssw": "ss", "sun": "su", "swa": "sw", "swc": "sw-CD", "swe": "sv", "swh": "sw", "tah": "ty", "tam": "ta", "tat": "tt", "tdu": "dtp", "tel": "te", "tgk": "tg", "tgl": "fil", "tha": "th", "thc": "tpo", "thx": "oyb", "tib": "bo", "tie": "ras", "tir": "ti", "tkk": "twm", "tl": "fil", "tlw": "weo", "tmp": "tyj", "tne": "kak", "tnf": "fa-af", "ton": "to", "tsf": "taj", "tsn": "tn", "tso": "ts", "ttq": "tmh", "tuk": "tk", "tur": "tr", "tw": "ak", "twi": "ak", "tzm-Latn-MA": "tzm-MA", "ug-Arab-CN": "ug-CN", "uig": "ug", "ukr": "uk", "umu": "del", "uok": "ema", "urd": "ur", "uz-AF": "uz-Arab-AF", "uz-UZ": "uz-Latn-UZ", "uzb": "uz", "uzn": "uz", "vai-LR": "vai-Vaii-LR", "ven": "ve", "vie": "vi", "vol": "vo", "wel": "cy", "wln": "wa", "wol": "wo", "xba": "cax", "xho": "xh", "xia": "acn", "xkh": "waw", "xpe": "kpe", "xsj": "suj", "xsl": "den", "ybd": "rki", "ydd": "yi", "yid": "yi", "yma": "lrr", "ymt": "mtm", "yor": "yo", "yos": "zom", "yue-CN": "yue-Hans-CN", "yue-HK": "yue-Hant-HK", "yuu": "yug", "zai": "zap", "zh-CN": "zh-Hans-CN", "zh-guoyu": "zh", "zh-hakka": "hak", "zh-HK": "zh-Hant-HK", "zh-min-nan": "nan", "zh-MO": "zh-Hant-MO", "zh-SG": "zh-Hans-SG", "zh-TW": "zh-Hant-TW", "zh-xiang": "hsn", "zh-min": "nan-x-zh-min", "zha": "za", "zho": "zh", "zsm": "ms", "zul": "zu", "zyb": "za" };

    /* @generated */
    // prettier-ignore  
    var parentLocales = { "en-150": "en-001", "en-AG": "en-001", "en-AI": "en-001", "en-AU": "en-001", "en-BB": "en-001", "en-BM": "en-001", "en-BS": "en-001", "en-BW": "en-001", "en-BZ": "en-001", "en-CA": "en-001", "en-CC": "en-001", "en-CK": "en-001", "en-CM": "en-001", "en-CX": "en-001", "en-CY": "en-001", "en-DG": "en-001", "en-DM": "en-001", "en-ER": "en-001", "en-FJ": "en-001", "en-FK": "en-001", "en-FM": "en-001", "en-GB": "en-001", "en-GD": "en-001", "en-GG": "en-001", "en-GH": "en-001", "en-GI": "en-001", "en-GM": "en-001", "en-GY": "en-001", "en-HK": "en-001", "en-IE": "en-001", "en-IL": "en-001", "en-IM": "en-001", "en-IN": "en-001", "en-IO": "en-001", "en-JE": "en-001", "en-JM": "en-001", "en-KE": "en-001", "en-KI": "en-001", "en-KN": "en-001", "en-KY": "en-001", "en-LC": "en-001", "en-LR": "en-001", "en-LS": "en-001", "en-MG": "en-001", "en-MO": "en-001", "en-MS": "en-001", "en-MT": "en-001", "en-MU": "en-001", "en-MW": "en-001", "en-MY": "en-001", "en-NA": "en-001", "en-NF": "en-001", "en-NG": "en-001", "en-NR": "en-001", "en-NU": "en-001", "en-NZ": "en-001", "en-PG": "en-001", "en-PH": "en-001", "en-PK": "en-001", "en-PN": "en-001", "en-PW": "en-001", "en-RW": "en-001", "en-SB": "en-001", "en-SC": "en-001", "en-SD": "en-001", "en-SG": "en-001", "en-SH": "en-001", "en-SL": "en-001", "en-SS": "en-001", "en-SX": "en-001", "en-SZ": "en-001", "en-TC": "en-001", "en-TK": "en-001", "en-TO": "en-001", "en-TT": "en-001", "en-TV": "en-001", "en-TZ": "en-001", "en-UG": "en-001", "en-VC": "en-001", "en-VG": "en-001", "en-VU": "en-001", "en-WS": "en-001", "en-ZA": "en-001", "en-ZM": "en-001", "en-ZW": "en-001", "en-AT": "en-150", "en-BE": "en-150", "en-CH": "en-150", "en-DE": "en-150", "en-DK": "en-150", "en-FI": "en-150", "en-NL": "en-150", "en-SE": "en-150", "en-SI": "en-150", "es-AR": "es-419", "es-BO": "es-419", "es-BR": "es-419", "es-BZ": "es-419", "es-CL": "es-419", "es-CO": "es-419", "es-CR": "es-419", "es-CU": "es-419", "es-DO": "es-419", "es-EC": "es-419", "es-GT": "es-419", "es-HN": "es-419", "es-MX": "es-419", "es-NI": "es-419", "es-PA": "es-419", "es-PE": "es-419", "es-PR": "es-419", "es-PY": "es-419", "es-SV": "es-419", "es-US": "es-419", "es-UY": "es-419", "es-VE": "es-419", "pt-AO": "pt-PT", "pt-CH": "pt-PT", "pt-CV": "pt-PT", "pt-FR": "pt-PT", "pt-GQ": "pt-PT", "pt-GW": "pt-PT", "pt-LU": "pt-PT", "pt-MO": "pt-PT", "pt-MZ": "pt-PT", "pt-ST": "pt-PT", "pt-TL": "pt-PT", "zh-Hant-MO": "zh-Hant-HK" };

    function getParentLocaleHierarchy(locale) {
        var results = [];
        locale = aliases[locale] || locale;
        var parentLocale = parentLocales[locale];
        if (parentLocale) {
            results.push(parentLocale);
        }
        var localeParts = locale.split('-');
        for (var i = localeParts.length; i > 1; i--) {
            results.push(localeParts.slice(0, i - 1).join('-'));
        }
        return results;
    }
    function resolveSupportedLocale(locale, localeData) {
        if (!locale) {
            return;
        }
        var lowercasedLocale = locale.toLowerCase();
        if (lowercasedLocale in localeData) {
            return localeData[lowercasedLocale].locale || locale;
        }
        var alias = aliases[locale];
        if (alias) {
            var lowercasedAlias = alias.toLowerCase();
            if (lowercasedAlias in localeData) {
                return localeData[lowercasedAlias].locale || alias;
            }
        }
        var parentHierarchy = getParentLocaleHierarchy(locale);
        var parentLocale = locale;
        while (parentLocale) {
            parentLocale = parentHierarchy.shift();
            if (parentLocale) {
                var lowercasedParentLocale = parentLocale.toLowerCase();
                if (lowercasedParentLocale in localeData) {
                    return localeData[lowercasedParentLocale].locale || parentLocale;
                }
            }
        }
        return;
    }
    function supportedLocalesOf(locales, localeData) {
        var localeArray = Array.isArray(locales) ? locales : [locales];
        return localeArray.filter(function (l) { return !!resolveSupportedLocale(l, localeData); });
    }
    function findSupportedLocale(locales, localeData) {
        var localeArray = Array.isArray(locales) ? locales : [locales];
        for (var i = 0; i < localeArray.length; i++) {
            var resolvedLocale = resolveSupportedLocale(localeArray[i], localeData);
            if (resolvedLocale) {
                return resolvedLocale;
            }
        }
    }

    /**
     * https://tc39.es/ecma262/#sec-toobject
     * @param arg
     */
    function toObject(arg) {
        if (arg == null) {
            throw new TypeError('undefined/null cannot be converted to object');
        }
        return Object(arg);
    }
    /**
     * https://tc39.es/ecma402/#sec-getoption
     * @param opts
     * @param prop
     * @param type
     * @param values
     * @param fallback
     */
    function getOption(opts, prop, type, values, fallback) {
        // const descriptor = Object.getOwnPropertyDescriptor(opts, prop);
        var value = opts[prop];
        if (value !== undefined) {
            if (type !== 'boolean' && type !== 'string') {
                throw new TypeError('invalid type');
            }
            if (type === 'boolean') {
                value = new Boolean(value);
            }
            if (type === 'string') {
                value = new String(value);
            }
            if (values !== undefined && !values.filter(function (val) { return val == value; }).length) {
                throw new RangeError(value + " in not within " + values);
            }
            return value;
        }
        return fallback;
    }

    var __assign = (undefined && undefined.__assign) || function () {
        __assign = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    var __spreadArrays = (undefined && undefined.__spreadArrays) || function () {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };
    /**
     * Find the correct field data in our CLDR data
     * Also merge with parent data since our CLDR is very packed
     * @param locale locale
     */
    function findFields(locale) {
        var localeData = RelativeTimeFormat.__localeData__;
        var parentHierarchy = getParentLocaleHierarchy(locale);
        var dataToMerge = __spreadArrays([locale], parentHierarchy).map(function (l) { return localeData[l.toLowerCase()]; })
            .filter(Boolean);
        if (!dataToMerge.length) {
            throw new Error("Locale data added to RelativeTimeFormat is missing 'fields' for \"" + locale + "\"");
        }
        dataToMerge.reverse();
        return dataToMerge.reduce(function (all, d) { return (__assign(__assign({}, all), d.fields)); }, {});
    }
    function findFieldData(fields, unit, style) {
        if (style == 'long') {
            return fields[unit];
        }
        if (style == 'narrow') {
            return (fields[unit + "-narrow"] ||
                fields[unit + "-short"]);
        }
        return fields[unit + "-short"];
    }
    function objectIs(x, y) {
        if (Object.is) {
            return Object.is(x, y);
        }
        // SameValue algorithm
        if (x === y) {
            // Steps 1-5, 7-10
            // Steps 6.b-6.e: +0 != -0
            return x !== 0 || 1 / x === 1 / y;
        }
        // Step 6.a: NaN == NaN
        return x !== x && y !== y;
    }
    function resolvePastOrFuture(value) {
        return objectIs(value, -0)
            ? 'past'
            : objectIs(value, +0)
                ? 'future'
                : value < 0
                    ? 'past'
                    : 'future';
    }
    function validateInstance(instance, method) {
        if (!(instance instanceof RelativeTimeFormat)) {
            throw new TypeError("Method Intl.RelativeTimeFormat.prototype." + method + " called on incompatible receiver " + String(instance));
        }
    }
    function validateUnit(unit) {
        // `unit + ''` to guard against `Symbol()`
        if (!~VALID_UNITS.indexOf(unit + '')) {
            throw new RangeError("Invalid unit argument for format() '" + String(unit) + "'");
        }
        var resolvedUnit = (unit[unit.length - 1] === 's'
            ? unit.slice(0, unit.length - 1)
            : unit);
        return resolvedUnit;
    }
    function validateValue(value, method) {
        if (method === void 0) { method = 'format'; }
        var parsedValue = typeof value === 'string' ? new Number(value).valueOf() : value;
        if (!isFinite(parsedValue)) {
            throw new RangeError("Value need to be finite number for Intl.RelativeTimeFormat.prototype." + method + "()");
        }
        return parsedValue;
    }
    function isString(s) {
        return !!s;
    }
    var DEFAULT_LOCALE = new Intl.NumberFormat().resolvedOptions().locale;
    var RelativeTimeFormat = /** @class */ (function () {
        function RelativeTimeFormat(locales, options) {
            // test262/test/intl402/RelativeTimeFormat/constructor/constructor/newtarget-undefined.js
            // Cannot use `new.target` bc of IE11 & TS transpiles it to something else
            var newTarget = this && this instanceof RelativeTimeFormat ? this.constructor : void 0;
            if (!newTarget) {
                throw new TypeError("Intl.RelativeTimeFormat must be called with 'new'");
            }
            var opts = options === undefined ? Object.create(null) : toObject(options);
            var localesToLookup = locales === undefined
                ? [DEFAULT_LOCALE]
                : __spreadArrays(Intl.NumberFormat.supportedLocalesOf(locales), [DEFAULT_LOCALE]);
            var resolvedLocale = findSupportedLocale(localesToLookup, RelativeTimeFormat.__localeData__);
            if (!resolvedLocale) {
                throw new Error("No locale data has been added to IntlRelativeTimeFormat for: " + localesToLookup.join(', '));
            }
            this._fields = findFields(resolvedLocale);
            this._localeMatcher = getOption(opts, 'localeMatcher', 'string', ['best fit', 'lookup'], 'best fit');
            this._style = getOption(opts, 'style', 'string', ['long', 'narrow', 'short'], 'long');
            this._numeric = getOption(opts, 'numeric', 'string', ['always', 'auto'], 'always');
            this._nf = new Intl.NumberFormat(locales);
            this._pl = new Intl.PluralRules(locales);
            this._numberingSystem = this._nf.resolvedOptions().numberingSystem;
        }
        RelativeTimeFormat.prototype.format = function (value, unit) {
            validateInstance(this, 'format');
            var resolvedUnit = validateUnit(unit);
            var parsedValue = validateValue(value);
            var _a = this, style = _a._style, numeric = _a._numeric;
            var fieldData = findFieldData(this._fields, resolvedUnit, style);
            if (!fieldData) {
                throw new Error("Unsupported unit " + unit);
            }
            var relative = fieldData.relative, relativeTime = fieldData.relativeTime;
            var result = '';
            // We got a match for things like yesterday
            if (numeric == 'auto' &&
                (result = relative[String(parsedValue)] || '')) {
                return result;
            }
            var selector = this._pl.select(parsedValue);
            var futureOrPastData = relativeTime[resolvePastOrFuture(parsedValue)];
            var msg = futureOrPastData[selector] || futureOrPastData.other;
            return msg.replace(/\{0\}/, this._nf.format(Math.abs(parsedValue)));
        };
        RelativeTimeFormat.prototype.formatToParts = function (value, unit) {
            validateInstance(this, 'format');
            var resolvedUnit = validateUnit(unit);
            var parsedValue = validateValue(value, 'formatToParts');
            var _a = this, style = _a._style, numeric = _a._numeric;
            var fieldData = findFieldData(this._fields, resolvedUnit, style);
            if (!fieldData) {
                throw new Error("Unsupported unit " + unit);
            }
            var relative = fieldData.relative, relativeTime = fieldData.relativeTime;
            var result = '';
            // We got a match for things like yesterday
            if (numeric == 'auto' &&
                (result = relative[String(parsedValue)] || '')) {
                return [
                    {
                        type: 'literal',
                        value: result,
                    },
                ];
            }
            var selector = this._pl.select(parsedValue);
            var futureOrPastData = relativeTime[resolvePastOrFuture(parsedValue)];
            var msg = futureOrPastData[selector] || futureOrPastData.other;
            var valueParts = this._nf
                .formatToParts(Math.abs(parsedValue))
                .map(function (p) { return (__assign(__assign({}, p), { unit: resolvedUnit })); });
            return msg
                .split(/(\{0\})/)
                .filter(isString)
                .reduce(function (parts, str) { return __spreadArrays(parts, (str === '{0}'
                ? valueParts
                : [{ type: 'literal', value: str }])); }, []);
        };
        RelativeTimeFormat.prototype.resolvedOptions = function () {
            validateInstance(this, 'resolvedOptions');
            // test262/test/intl402/RelativeTimeFormat/prototype/resolvedOptions/type.js
            var opts = Object.create(Object.prototype);
            Object.defineProperties(opts, {
                locale: {
                    value: this._nf.resolvedOptions().locale,
                    writable: true,
                    enumerable: true,
                    configurable: true,
                },
                style: {
                    value: this._style.valueOf(),
                    writable: true,
                    enumerable: true,
                    configurable: true,
                },
                numeric: {
                    value: this._numeric.valueOf(),
                    writable: true,
                    enumerable: true,
                    configurable: true,
                },
                numberingSystem: {
                    value: this._numberingSystem.valueOf(),
                    writable: true,
                    enumerable: true,
                    configurable: true,
                },
            });
            return opts;
        };
        RelativeTimeFormat.supportedLocalesOf = function (locales, opts) {
            // test262/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/options-toobject.js
            var localeMatcher = 'best fit';
            // test262/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/options-null.js
            if (opts === null) {
                throw new TypeError('opts cannot be null');
            }
            if (opts) {
                localeMatcher = getOption(opts, 'localeMatcher', 'string', ['best fit', 'lookup'], 'best fit');
            }
            // test262/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/result-type.js
            return supportedLocalesOf(Intl.NumberFormat.supportedLocalesOf(locales, { localeMatcher: localeMatcher }), RelativeTimeFormat.__localeData__);
        };
        RelativeTimeFormat.__addLocaleData = function () {
            var data = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                data[_i] = arguments[_i];
            }
            for (var _a = 0, data_1 = data; _a < data_1.length; _a++) {
                var datum = data_1[_a];
                if (!(datum && datum.locale)) {
                    throw new Error('Locale data provided to RelativeTimeFormat is missing a ' +
                        '`locale` property value');
                }
                RelativeTimeFormat.__localeData__[datum.locale.toLowerCase()] = datum;
            }
        };
        RelativeTimeFormat.__localeData__ = {};
        RelativeTimeFormat.polyfilled = true;
        return RelativeTimeFormat;
    }());
    try {
        // IE11 does not have Symbol
        if (typeof Symbol !== 'undefined') {
            Object.defineProperty(RelativeTimeFormat.prototype, Symbol.toStringTag, {
                value: 'Intl.RelativeTimeFormat',
                writable: false,
                enumerable: false,
                configurable: true,
            });
        }
        // https://github.com/tc39/test262/blob/master/test/intl402/RelativeTimeFormat/constructor/length.js
        Object.defineProperty(RelativeTimeFormat.prototype.constructor, 'length', {
            value: 0,
            writable: false,
            enumerable: false,
            configurable: true,
        });
        // https://github.com/tc39/test262/blob/master/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/length.js
        Object.defineProperty(RelativeTimeFormat.supportedLocalesOf, 'length', {
            value: 1,
            writable: false,
            enumerable: false,
            configurable: true,
        });
    }
    catch (e) {
        // Meta fix so we're test262-compliant, not important
    }

    exports.VALID_UNITS = VALID_UNITS;
    exports.default = RelativeTimeFormat;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=intl-relativetimeformat.js.map
