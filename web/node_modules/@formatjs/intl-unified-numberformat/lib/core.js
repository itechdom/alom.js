var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { findSupportedLocale, getParentLocaleHierarchy, supportedLocalesOf, } from '@formatjs/intl-utils';
export function isUnitSupported(unit) {
    try {
        new Intl.NumberFormat(undefined, {
            style: 'unit',
            unit: unit,
        });
    }
    catch (e) {
        return false;
    }
    return true;
}
var NativeNumberFormat = Intl.NumberFormat;
function findUnitData(locale, unit) {
    var localeData = UnifiedNumberFormat.__unitLocaleData__;
    var parentHierarchy = getParentLocaleHierarchy(locale);
    var dataToMerge = __spreadArrays([locale], parentHierarchy).map(function (l) { return localeData[l.toLowerCase()]; })
        .filter(Boolean);
    if (!dataToMerge.length) {
        throw new RangeError("Cannot find \"" + unit + "\" data for " + locale);
    }
    dataToMerge.reverse();
    return dataToMerge.reduce(function (all, d) { return (__assign(__assign({}, all), ((d && d.units && d.units[unit]) || {}))); }, {
        displayName: unit,
        long: {},
    });
}
var DEFAULT_LOCALE = new NativeNumberFormat().resolvedOptions().locale;
var UnifiedNumberFormat = /** @class */ (function () {
    function UnifiedNumberFormat(locales, _a) {
        if (_a === void 0) { _a = {}; }
        var style = _a.style, unit = _a.unit, unitDisplay = _a.unitDisplay, options = __rest(_a, ["style", "unit", "unitDisplay"]);
        this.unit = undefined;
        this.unitDisplay = undefined;
        if (style === 'unit') {
            if (!unit) {
                throw new TypeError('Unit is required for `style: unit`');
            }
            this.unit = unit;
            this.unitDisplay = unitDisplay || 'short';
            var localesToLookup = __spreadArrays((Array.isArray(locales) ? locales : [locales]), [
                DEFAULT_LOCALE,
            ]);
            var resolvedLocale = findSupportedLocale(localesToLookup, UnifiedNumberFormat.__unitLocaleData__);
            if (!resolvedLocale) {
                throw new RangeError("No locale data has been added to IntlRelativeTimeFormat for: " + localesToLookup.join(', '));
            }
            this.patternData = findUnitData(resolvedLocale, this.unit);
        }
        this.nf = new NativeNumberFormat(locales, __assign(__assign({}, options), { style: style === 'unit' ? 'decimal' : style }));
        this.pl = new Intl.PluralRules(locales);
        this.locale = this.nf.resolvedOptions().locale;
    }
    UnifiedNumberFormat.prototype.format = function (num) {
        var formattedNum = this.nf.format(num);
        if (this.patternData) {
            var pl = this.pl.select(num);
            var pattern = this.patternData[this.unitDisplay][pl === 'one' ? 'one' : 'other'];
            return pattern.replace('{0}', formattedNum);
        }
        return formattedNum;
    };
    UnifiedNumberFormat.prototype.formatToParts = function (num) {
        return this.nf.formatToParts(num);
    };
    UnifiedNumberFormat.prototype.resolvedOptions = function () {
        var ro = this.nf.resolvedOptions();
        if (this.unit) {
            ro.style = 'unit';
            ro.unit = this.unit;
            ro.unitDisplay = this.unitDisplay;
        }
        return ro;
    };
    UnifiedNumberFormat.supportedLocalesOf = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return supportedLocalesOf(args[0], UnifiedNumberFormat.__unitLocaleData__);
    };
    UnifiedNumberFormat.__addUnitLocaleData = function (data) {
        data.forEach(function (datum) {
            if (!(datum && datum.locale)) {
                throw new Error('Locale data provided to UnifiedNumberFormat is missing a ' +
                    '`locale` property value');
            }
            UnifiedNumberFormat.__unitLocaleData__[datum.locale.toLowerCase()] = datum;
        });
    };
    UnifiedNumberFormat.polyfilled = true;
    UnifiedNumberFormat.__unitLocaleData__ = {};
    return UnifiedNumberFormat;
}());
export { UnifiedNumberFormat };
