import { Unit } from './units-constants';
import { UnifiedNumberFormatLocaleData } from '@formatjs/intl-utils';
export declare function isUnitSupported(unit: Unit): boolean;
export interface UnifiedNumberFormatOptions extends Intl.NumberFormatOptions {
    unit?: Unit;
    unitDisplay?: 'long' | 'short' | 'narrow';
}
export interface ResolvedUnifiedNumberFormatOptions extends Intl.ResolvedNumberFormatOptions {
    unit?: Unit;
    unitDisplay?: 'long' | 'short' | 'narrow';
}
declare const NativeNumberFormat: {
    (locales?: string | string[] | undefined, options?: Intl.NumberFormatOptions | undefined): Intl.NumberFormat;
    new (locales?: string | string[] | undefined, options?: Intl.NumberFormatOptions | undefined): Intl.NumberFormat;
    supportedLocalesOf(locales: string | string[], options?: Intl.NumberFormatOptions | undefined): string[];
};
export declare class UnifiedNumberFormat implements Intl.NumberFormat {
    private unit;
    private unitDisplay;
    private nf;
    private pl;
    private locale;
    private patternData?;
    constructor(locales: string | string[], { style, unit, unitDisplay, ...options }?: UnifiedNumberFormatOptions);
    format(num: number): string;
    formatToParts(num: number): Intl.NumberFormatPart[];
    resolvedOptions(): ResolvedUnifiedNumberFormatOptions;
    static supportedLocalesOf(...args: Parameters<typeof NativeNumberFormat.supportedLocalesOf>): (string | undefined)[];
    static polyfilled: boolean;
    static __unitLocaleData__: Record<string, UnifiedNumberFormatLocaleData>;
    static __addUnitLocaleData(data: UnifiedNumberFormatLocaleData[]): void;
}
export {};
