'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = Compose;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _layout = require('./layout');

var _layout2 = _interopRequireDefault(_layout);

var _mediaQueryListByQueryString = {};
var _predefinedMediaQueryString = {
  xs: 'screen and (min-width: 480px)',
  sm: 'screen and (min-width: 768px)',
  md: 'screen and (min-width: 992px)',
  lg: 'screen and (min-width: 1200px)'
};

function _query(key) {
  return key[0] === '@' || key === 'xs' || key === 'md' || key === 'lg';
};

function _onMediaQueryChange(component, query, mediaQueryList) {
  var media = {};
  media[query] = mediaQueryList.matches;
  _setStyleState(component, query, media);
}

function _setStyleState(component, key, newState) {
  var existing = component.state && component.state._media || {};
  var state = { _media: (0, _objectAssign2['default'])({}, existing) };
  state._media[key] = state._media[key] || {};
  (0, _objectAssign2['default'])(state._media[key], newState);
  component.setState({
    _media: state._media
  });
}

function _resolveLayoutGeneral(props, style) {
  var newStyle = {};
  if (props.block) {
    newStyle = (0, _objectAssign2['default'])(newStyle, style, _layout2['default'].block);
  }
  if (props.hidden) {
    newStyle = (0, _objectAssign2['default'])(newStyle, style, _layout2['default'].hidden);
  }
  if (props.invisible) {
    newStyle = (0, _objectAssign2['default'])(newStyle, style, _layout2['default'].invisible);
  }

  return newStyle;
}

function _resolveLayoutPosition(props, style) {
  var newStyle = {};
  if (props.relative) {
    newStyle = (0, _objectAssign2['default'])(newStyle, style, _layout2['default'].relative);
  }
  if (props.absolute) {
    newStyle = (0, _objectAssign2['default'])(newStyle, style, _layout2['default'].absolute);
  }

  return newStyle;
};

function _resolveLayoutFlex(props, style) {
  var newStyle = {};
  if (props.layout) {
    newStyle = (0, _objectAssign2['default'])(newStyle, style, _layout2['default'].layout, _layout2['default'].vertical);
    if (props.vertical) {
      props.reverse ? newStyle = (0, _objectAssign2['default'])(newStyle, style, _layout2['default'].verticalReverse) : newStyle = (0, _objectAssign2['default'])(newStyle, style, _layout2['default'].vertical);
    } else {
      props.reverse ? newStyle = (0, _objectAssign2['default'])(newStyle, style, _layout2['default'].horizontalReverse) : newStyle = (0, _objectAssign2['default'])(newStyle, style, _layout2['default'].horizontal);
    }
  }
  if (props.inline) {
    newStyle = (0, _objectAssign2['default'])(newStyle, style, _layout2['default'].inline, _layout2['default'].horizontal);
  }

  props.flex ? newStyle = (0, _objectAssign2['default'])(newStyle, _layout2['default'].flexAuto, style) : newStyle = (0, _objectAssign2['default'])(newStyle, _layout2['default'].flexNone, style);

  return newStyle;
};

function _resolveLayoutAlign(props, style) {
  var newStyle = {};
  newStyle = (0, _objectAssign2['default'])(newStyle, style, _layout2['default'].alignStretch);
  if (props.start) {
    newStyle = (0, _objectAssign2['default'])(newStyle, style, _layout2['default'].alignStart);
  }
  if (props.center) {
    newStyle = (0, _objectAssign2['default'])(newStyle, style, _layout2['default'].alignCenter);
  }
  if (props.end) {
    newStyle = (0, _objectAssign2['default'])(newStyle, style, _layout2['default'].alignEnd);
  }
  if (props.centered) {
    newStyle = (0, _objectAssign2['default'])(newStyle, style, _layout2['default'].centered);
  }

  return newStyle;
};

function _resolveLayoutSelf(props, style) {
  var newStyle = {};
  if (props.selfStart) {
    newStyle = (0, _objectAssign2['default'])(newStyle, style, _layout2['default'].selfAlignStart);
  }
  if (props.selfCenter) {
    newStyle = (0, _objectAssign2['default'])(newStyle, style, _layout2['default'].selfAlignCenter);
  }
  if (props.selfEnd) {
    newStyle = (0, _objectAssign2['default'])(newStyle, style, _layout2['default'].selfAlignEnd);
  }
  if (props.selfStretch) {
    newStyle = (0, _objectAssign2['default'])(newStyle, style, _layout2['default'].selfAlignStretch);
  }

  return newStyle;
};

function _resolveLayoutJustify(props, style) {
  var newStyle = {};
  if (props.justifyStart) {
    newStyle = (0, _objectAssign2['default'])(newStyle, style, _layout2['default'].justifyStart);
  }
  if (props.justifyCenter) {
    newStyle = (0, _objectAssign2['default'])(newStyle, style, _layout2['default'].justifyCenter);
  }
  if (props.justifyEnd) {
    newStyle = (0, _objectAssign2['default'])(newStyle, style, _layout2['default'].justifyEnd);
  }
  if (props.justifyStretch) {
    newStyle = (0, _objectAssign2['default'])(newStyle, style, _layout2['default'].justifyStretch);
  }
  if (props.justifyBetween) {
    newStyle = (0, _objectAssign2['default'])(newStyle, style, _layout2['default'].justifyBetween);
  }
  if (props.justifyAround) {
    newStyle = (0, _objectAssign2['default'])(newStyle, style, _layout2['default'].justifyAround);
  }

  return newStyle;
};

function _resolveLayoutStyles(props, style) {
  return (0, _objectAssign2['default'])({}, _resolveLayoutGeneral(props, style), _resolveLayoutPosition(props, style), _resolveLayoutFlex(props, style), _resolveLayoutAlign(props, style), _resolveLayoutSelf(props, style), _resolveLayoutJustify(props, style));
};

function _resolveMediaQueries(component, style) {
  var newStyle = {};
  if (style) {
    Object.keys(style).filter(function (name) {
      return _query(name);
    }).map(function (query) {
      var mql = undefined;
      var mediaQueryStyles = undefined;

      mediaQueryStyles = style[query];
      query = query[0] === '@' ? query.replace('@media ', '') : _predefinedMediaQueryString[query];
      mql = _mediaQueryListByQueryString[query];
      if (!mql) {
        _mediaQueryListByQueryString[query] = mql = window.matchMedia(query);
      }

      if (!component._mediaQueryListenersByQuery) {
        component._mediaQueryListenersByQuery = {};
      }

      if (!component._mediaQueryListenersByQuery[query]) {
        (function () {
          var listener = _onMediaQueryChange.bind(null, component, query);
          mql.addListener(listener);
          component._mediaQueryListenersByQuery[query] = {
            remove: function remove() {
              mql.removeListener(listener);
            }
          };
        })();
      }

      if (mql.matches) {
        newStyle = (0, _objectAssign2['default'])({}, style[query], mediaQueryStyles);
      }
    });
  }

  return newStyle;
};

function Compose(component, rendered) {
  var props = rendered.props;
  var style = props.style;

  var newProps = {};
  var newStyle = {};

  if (Array.isArray(style)) {
    for (var i = 0; i < style.length; i++) {
      if (!style[i] || typeof style[i] !== 'object' || Array.isArray(style[i])) {
        console.warn('styles object should be an object');
      }
      newStyle = (0, _objectAssign2['default'])(newStyle, style[i]);
    }
  }

  newStyle = (0, _objectAssign2['default'])(newStyle, _resolveLayoutStyles(props, style));
  newStyle = (0, _objectAssign2['default'])(newStyle, _resolveMediaQueries(component, style));

  Object.keys(newStyle).forEach(function (key) {
    if (_query(key)) {
      delete newStyle[key];
    }
  });

  newProps = (0, _objectAssign2['default'])(newProps, { style: newStyle });
  return _react2['default'].cloneElement(rendered, newProps);
}

module.exports = exports['default'];